---
import type { GetStaticPaths } from 'astro';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content'
import type { CollectionEntry } from 'astro:content'

// import BillyAvatar from '@/components/Base/BillyAvatar.astro'
import Layout from '@/layouts/Layout.astro'

import {
    IconAstro,
    IconBootstrap,
    IconCss,
    IconHtml,
    IconIllustrator,
    IconInVision,
    IconJavaScript,
    IconLogSnag,
    IconMongoDB,
    IconNode,
    IconNodemailer,
    IconNuxt,
    IconPhotoshop,
    IconPhp,
    IconReact,
    IconSass,
    IconStripe,
    IconTailwind,
    IconTypeScript,
    IconVercel,
    IconVite,
    IconVue,
    IconWordPress,
} from '@/assets/icons/icons'

function svgIcon(icon: string) {
    switch (icon) {
        case 'Astro': return IconAstro
        case 'Bootstrap': return IconBootstrap
        case 'CSS': return IconCss
        case 'HTML': return IconHtml
        case 'Illustrator': return IconIllustrator
        case 'InVision': return IconInVision
        case 'JavaScript': return IconJavaScript
        case 'LogSnag': return IconLogSnag
        case 'MongoDB': return IconMongoDB
        case 'Node.js': return IconNode
        case 'Nodemailer': return IconNodemailer
        case 'Nuxt': return IconNuxt
        case 'Photoshop': return IconPhotoshop
        case 'PHP': return IconPhp
        case 'React': return IconReact
        case 'SASS': return IconSass
        case 'SCSS': return IconSass
        case 'Stripe': return IconStripe
        case 'Tailwind': return IconTailwind
        case 'TypeScript': return IconTypeScript
        case 'Vercel': return IconVercel
        case 'Vite': return IconVite
        case 'Vue': return IconVue
        case 'WordPress': return IconWordPress
        default: return null
    }
}

type Props = {
    item: CollectionEntry<'projects'>
}

function formattedDate(date: Date) {
    const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'short', day: 'numeric' }
    return new Intl.DateTimeFormat('en-US', options).format(date)
}

export const getStaticPaths = async () => {
    const projectItems = await getCollection('projects')
    const paths = projectItems.map((item) => {
        return {
            params: {
                slug: item.slug
            },
            props: {
                item
            }
        }
    });
    return paths
}

const { item } = Astro.props as Props
const { Content } = await item.render()
---

<Layout title={ item.data.title }>
    <section>
        <div class="work-page__top-nav row">
            <!-- <BillyAvatar /> -->
            <a href="/">Home</a>
        </div>
        <div class="row row--narrow">
            <h1 class="project-title">{ item.data.title }</h1>
            <p class="project-date">Project date: { formattedDate(item.data.date) }</p>
            <Image
                class="work-banner-img"
                src={item.data.image.src}
                alt={item.data.image.alt}
                width="768"
                height="706"
                format="webp"
            />
            <h2>Tech used:</h2>
            <ul class="tech-list">
                {item.data.tech.map((tech: string) => {
                    return (
                        <li data-tooltip={tech}>
                            <img
                                class="tech-icon"
                                src={svgIcon(tech)?.src}
                                alt={tech}
                                role="presentation"
                            />
                        </li>
                    )
                })}
            </ul>
            <Content />
            <hr />
            <p>
                <a href="/">Home</a>
            </p>
        </div>
        <!-- <TransitionPanel dataPosition="right" /> -->
    </section>
</Layout>

<style lang="scss">
.work-page__top-nav {
    padding-top: 1rem;
    padding-bottom: 1rem;
}

.work-banner-img {
    border-radius: 1rem;
    box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.1);
    margin: 1rem 0 2rem;
}

.tech-list {
    display: flex;
    flex-wrap: wrap;
    list-style: none;
    padding: 0;
    margin: 0 0 2rem;
}

.tech-list li {
    position: relative;
    padding: 0 0.5rem;
}

.tech-list li:first-child {
    padding-left: 0;
}

.tech-list li:last-child {
    padding-right: 0;
}

.tech-list li::before {
    background: rgba(11, 14, 19, 0.8);
    border-radius: 2rem;
    bottom: 100%;
    color: #fff;
    content: attr(data-tooltip);
    font-size: 0.75rem;
    left: 50%;
    opacity: 0;
    padding: 0.25rem 1rem;
    position: absolute;
    transform: translate(-50%, 0.5rem);
    transition: all 350ms cubic-bezier(0.4, 0, 0.2, 1);
    visibility: hidden;
    width: auto;
}

.tech-list li:first-child::before {
    left: calc(50% - 0.25rem);
}

.tech-list li:last-child::before {
    left: calc(50% + 0.25rem);
}

.tech-list li:hover::before {
    opacity: 1;
    transform: translate(-50%, 0);
    visibility: visible;
}

.tech-list li:hover .tech-icon {
    transform: translateY(-0.1875rem);
}

.tech-icon {
    height: 2.5rem;
    margin: 0.5rem 0;
    transition: all 350ms cubic-bezier(0.4, 0, 0.2, 1);
    width: 2.5rem;
}

.project-title {
    margin-bottom: 0.125rem;
}

.project-date {
    color: rgba(11, 14, 19, 0.7);
    font-size: 0.875rem;
    margin: 0 0 1rem;
}
</style>