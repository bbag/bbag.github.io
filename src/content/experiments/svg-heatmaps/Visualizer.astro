---
import { Image } from 'astro:assets'
import { Code } from 'astro:components'
import Xray from './xray.jpg'

const codeTheme = 'material-theme-palenight'

const colors = [
    { r: 0.165, g: 0.239, b: 0.361 },
    { r: 0.094, g: 0.353, b: 0.647 },
    { r: 0.192, g: 0.667, b: 0.31 },
    { r: 0.949, g: 0.882, b: 0.129 },
    { r: 0.984, g: 0.027, b: 0.078 }
]

function calcBgColor(color: { r: number, g: number, b: number }) {
    return `${Math.round(color.r * 255)}, ${Math.round(color.g * 255)}, ${Math.round(color.b * 255)}`
}

const code = `<feFuncR type="table" tableValues="${colors.map(color => color.r).join(' ')}" />
<feFuncG type="table" tableValues="${colors.map(color => color.g).join(' ')}" />
<feFuncB type="table" tableValues="${colors.map(color => color.b).join(' ')}" />
`
---

<div class="gradient-preview">
    <div class="color-stops">
        {colors.map(color => (
            <span
                class="color-stop"
                style={`--bg: rgb(${calcBgColor(color)})`}
            ></span>
        ))}
    </div>

    <svg viewBox="0 0 200 25">
        <filter id="heatmap-filter" color-interpolation-filters="sRGB">
            <feComponentTransfer>
                {/* <feFuncR type="table" tableValues="0.165 0.094 0.192 0.949 0.984" />
                <feFuncG type="table" tableValues="0.239 0.353 0.667 0.882 0.027" />
                <feFuncB type="table" tableValues="0.361 0.647 0.31  0.129 0.078" /> */}
                <feFuncR type="table" tableValues={colors.map(color => color.r).join(' ')} />
                <feFuncG type="table" tableValues={colors.map(color => color.g).join(' ')} />
                <feFuncB type="table" tableValues={colors.map(color => color.b).join(' ')} />
            </feComponentTransfer>
        </filter>
        <use href="#svgRect" filter="url(#heatmap-filter)" />
        <use href="#svgRect" y="15" />
    </svg>
</div>

<Code theme={codeTheme} code={code} lang="html" />

<figure>
    <div style="display: grid; gap: 2rem; grid-template-columns: 1fr 1fr; margin: 1rem 0;">
        <Image src={Xray} alt="X-ray" style="border-radius: 0.5rem;" />
        <Image src={Xray} alt="X-ray" style="border-radius: 0.5rem; filter: url(#heatmap-filter);" />
    </div>
    <figcaption>Photo credit to <a href="https://www.pexels.com/@pixabay/" target="_blank" rel="noreferrer nofollow noopener">Pixabay</a> on Pexels.</figcaption>
</figure>

<!-- <p>To show it in action, weâ€™ll start with a simple black and white gradient and apply it to a rectangle in the SVG:</p>
<Code theme={codeTheme} code={`<linearGradient id="gradient">
    <stop stop-color="black" offset="0%" />
    <stop stop-color="white" offset="100%" />
</linearGradient>
<rect width="200" height="10" fill="url(#gradient)" />`} lang="html" />
<svg viewBox="0 0 200 10">
    <filter id="basic-filter" color-interpolation-filters="sRGB">
        <feComponentTransfer>
            <feFuncR type="table" tableValues="1 0" />
            <feFuncG type="table" tableValues="0 0" />
            <feFuncB type="table" tableValues="0 1" />
        </feComponentTransfer>
    </filter>
    <filter id="heatmap-filter" color-interpolation-filters="sRGB">
        <feComponentTransfer>
            <feFuncR type="table" tableValues="0.165 0.094 0.192 0.949 0.984" />
            <feFuncG type="table" tableValues="0.239 0.353 0.667 0.882 0.027" />
            <feFuncB type="table" tableValues="0.361 0.647 0.31  0.129 0.078" />
        </feComponentTransfer>
    </filter>
    <linearGradient id="bw-gradient">
        <stop stop-color="black" offset="0%" />
        <stop stop-color="white" offset="100%" />
    </linearGradient>
    <rect id="svgRect" x="0" y="0" width="200" height="10" fill="url(#bw-gradient)" />
</svg> -->

<style lang="scss">
svg {
    margin-bottom: 2rem;
}

.gradient-preview {
    padding: 0 0.625rem;
}

.color-stops {
    align-items: center;
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
}

.color-stop {
    position: relative;

    &,
    &::after {
        height: 1.25rem;
    }

    &::after {
        background-color: var(--bg, #FFF);
        border-radius: 1rem 1rem 0 1rem;
        border: 2px solid #FFF;
        box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1), 0 0.125rem 0.375rem rgba(0, 20, 40, 0.375);
        content: '';
        display: block;
        left: 0;
        position: absolute;
        top: 0;
        transform: translateX(-50%) rotate(45deg);
        width: 1.25rem;
    }
}
</style>

<script>
console.log('astro component loaded')
</script>