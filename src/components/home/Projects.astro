---
import { getCollection } from 'astro:content'
import type { CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'
import { techIcon } from '@/utils/techIcon'
import KeyboardButton from '@/components/base/KeyboardButton.astro'
import SectionHeading from '@/components/blocks/SectionHeading.astro'

type ProjectType = CollectionEntry<'projects'>

const projects = await getCollection('projects')

function priorityValue(priority: string) {
    switch (priority) {
        case 'high': return 3;
        case 'medium': return 2;
        case 'low': return 1;
        default: return 0;
    }
}

const layoutButtonPaths = [
    {
        name: 'cards',
        html: '<path d="M4 4m0 1a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z" /><path d="M14 4m0 1a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z" /><path d="M4 14m0 1a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z" /><path d="M14 14m0 1a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z" />'
    },
    {
        name: 'hexagons',
        html: '<path d="M4 18v-5l4 -2l4 2v5l-4 2z" /><path d="M8 11v-5l4 -2l4 2v5" /><path d="M12 13l4 -2l4 2v5l-4 2l-4 -2" />'
    },
    {
        name: 'list',
        html: '<path d="M4 4m0 2a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v2a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2z" /><path d="M4 14m0 2a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v2a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2z" />'
    }
]
---

<section>
    <SectionHeading heading="Projects" subheading="A collection of some of the cooler things Iâ€™ve worked on." />
    {layoutButtonPaths.map((radio) => (
        <input
            type="radio"
            name="projects-layout-radios"
            id={`projects-layout-${radio.name}`}
            value={radio.name}
            checked={radio.name === layoutButtonPaths[0].name}
            class="visually-hiddenx"
        />
    ))}
    <div class="projects-layout">
        {layoutButtonPaths.map((button) => (
        <label
            class="projects-layout-button"
            aria-label={`Switch to ${button.name} layout`}
            for={`projects-layout-${button.name}`}
            data-layout={button.name}
        >
            <svg class="line-icon" width="24" height="24" viewBox="0 0 24 24" set:html={button.html} />
        </label>
    ))}
    </div>
    <svg width="0" height="0">
        <clipPath id="hexagon-clip-mask" clipPathUnits="objectBoundingBox">
            <path d="M0.2146,0.8964L0.013,0.5484c-0.0173-0.0299-0.0173-0.0669,0-0.0968l0.2016-0.3481c0.0173-0.0298,0.0491-0.0482,0.0836-0.0482h0.4037c0.0344,0,0.0663,0.0184,0.0836,0.0482L0.987,0.4516c0.0173,0.0299,0.0173,0.0669,0,0.0968L0.7854,0.8964C0.7681,0.9263,0.7363,0.9446,0.7018,0.9446H0.2981C0.2637,0.9446,0.2318,0.9263,0.2146,0.8964z"></path>
        </clipPath>
    </svg>
    <ol class="projects-list">
        {projects
            // Sort projects by priority first, then date
            .sort((a, b) => {
                if (priorityValue(a.data.priority) > priorityValue(b.data.priority)) return -1;
                if (priorityValue(a.data.priority) < priorityValue(b.data.priority)) return 1;
                if (a.data.date > b.data.date) return -1;
                if (a.data.date < b.data.date) return 1;
                return 0;
            })
            .map((item) => (<li class="project">
                <a class="project-link" href={`/projects/${item.slug}`} title={item.data.title}>
                    <div class="project-link__outer">
                        <div class="project-link__inner">
                            <Image
                                class="project-img"
                                src={item.data.image.src}
                                alt={item.data.image.alt}
                                width="625"
                                height="575"
                                format="webp"
                            />
                        </div>
                    </div>
                    <div class="line-icon-container">
                        <svg class="line-icon" width="24" height="24" viewBox="0 0 24 24">
                            <line x1="5" y1="12" x2="19" y2="12" />
                            <line x1="13" y1="18" x2="19" y2="12" />
                            <line x1="13" y1="6" x2="19" y2="12" />
                        </svg>
                    </div>
                    <div class="project-text">
                        <!-- <svg class="project-text__svg" viewBox="0 0 100 100">
                            <text>
                                <textPath href="#text-curve">
                                    {item.data.title}
                                </textPath>
                            </text>
                        </svg> -->
                    </div>
                </a>
                <div class="project-details">
                    <h3 class="project-title">{item.data.title}</h3>
                    <div class="tech-list">{item.data.tech.map((tech: string) => (
                        <img
                            class="tech-icon"
                            src={techIcon(tech)?.src}
                            alt={tech}
                            title={tech}
                            role="presentation"
                        />
                    ))}</div>
                    <p>{item.data.description}</p>
                </div>
                <KeyboardButton href={`/projects/${item.slug}`} size="lg" fullWidth="true">
                    Project Details
                </KeyboardButton>
            </li>))
        }
    </ol>
</section>

<style lang="scss">
@import '@/styles/_Variables.scss';

$transition-func: 750ms cubic-bezier(0.19, 1, 0.22, 1);

section {
    // background:;
}

.line-icon-container {
    align-items: center;
    display: flex;
    justify-content: center;
    position: relative;
    z-index: 2;
}

.line-icon {
    .project-link & {
        background: rgba(255, 255, 255, 0.75);
        border-radius: 100vw;
        box-shadow: 0 0.25rem 0.75rem rgba(0, 20, 40, 0.15);
        color: var(--color-primary, #222325);
        height: 2.5rem;
        opacity: 0;
        padding: 0.5rem;
        transition: opacity $transition-func, transform $transition-func;
        transform: scale(0.15);
        width: 2.5rem;
    }

    @media (hover: hover) {
        .project-link:hover &,
        .project-link:focus-within & {
            opacity: 1;
            transform: scale(1);
        }
    }
}

// ---------------------------------------------------------- //
// Work layout state                                          //
// ---------------------------------------------------------- //

input[name='projects-layout-radios'] {
    border: 0 !important;
    clip: rect(0, 0, 0, 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    white-space: nowrap !important;
    width: 1px !important;
}

.projects-layout {
    align-items: center;
    background: #FFF;
    border: 1px solid #DFE3E9;
    border-radius: 1rem;
    box-shadow: 0 1px 2px rgba(0, 10, 20, 0.08);
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    margin: 0 auto 1.5rem;
    padding: 0.5rem 0.5rem;
    position: relative;
    width: min-content;
    z-index: 2;
}

.projects-layout-button {
    border-radius: 0.5rem;
    color: rgba(0, 10, 20, 0.45);
    cursor: pointer;
    display: flex;
    margin: 0;
    padding: 0.5rem;
    transition: background-color 250ms ease, color 250ms ease;

    &:hover,
    &:focus-visible {
        background-color: #F2F5FB;
        color: $color-text;
    }
}

#projects-layout-hexagons:checked ~ .projects-layout [data-layout="hexagons"],
#projects-layout-cards:checked ~ .projects-layout [data-layout="cards"],
#projects-layout-list:checked ~ .projects-layout [data-layout="list"] {
    background-color: #F2F5FB;
    color: $color-primary;
}

// ---------------------------------------------------------- //
// Default layout (list)                                      //
// ---------------------------------------------------------- //

// #projects-layout-list:checked ~ .projects-list {
.projects-list {
    list-style-type: none;
    margin: 0 auto 2rem;
    max-width: $breakpoint-md;
    padding: 0;
}

.project {
    display: grid;
    gap: 2rem;
    grid-template-columns: 20rem minmax(0, 1fr);
}

.project-title {
    font-size: 1.625rem;
    line-height: 1.2;
    margin: 0;
}

.tech-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin: 1rem 0;
}

.tech-icon {
    width: 1.5rem;
}

// ---------------------------------------------------------- //
// Hexagons layout                                            //
// ---------------------------------------------------------- //

#projects-layout-hexagons:checked ~ .projects-list {
    color: red;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    max-width: initial;
    list-style-type: none;
    padding: 0 0.75rem;

    & .project {
        display: initial;
        grid-area: span 2 / span 1;
        grid-template-columns: initial;
    }

    & .project-details {
        display: none;
    }

    & .project-link {
        clip-path: url(#hexagon-clip-mask);
        display: grid;
        margin-left: -7.5%;
        margin-right: -7.5%;
        transition: transform $transition-func;

        &:hover,
        &:focus-within {
            outline: none;
            transform: scale(1.125);
            z-index: 1;

            & .project-link__outer {
                background: rgba(0, 48, 96, 0.06);
            }

            & .project-link__inner {
                transform: scale(0.75);
            }

            & .project-img {
                filter: blur(0.375rem);
                transform: scale(1.5);
            }
        }

        & > * {
            grid-area: 1 / 1;
        }
    }

    & .project-link__outer {
        aspect-ratio: 1;
        background: rgba(0, 16, 40, 0.2);
        transition: background-color $transition-func;
    }

    & .project-link__inner {
        align-content: center;
        clip-path: url(#hexagon-clip-mask);
        color: inherit;
        height: 100%;
        justify-content: center;
        overflow: hidden;
        text-decoration: none;
        transform: scale(0.98);
        transition: transform $transition-func;
    }

    & .project-img {
        display: block;
        height: 100%;
        object-fit: cover;
        transition: filter $transition-func, transform $transition-func;
        width: 100%;
    }

    // below 576px
    @media (max-width: 35.999rem) {
        & {
            grid-template-columns: repeat(2, 1fr);
        }

        & .project:nth-child(2n + 1) {
            grid-column-start: 2;
        }
    }

    // 576px to 1279px
    @media (min-width: 36rem) and (max-width: 79.999rem) {
        & {
            grid-template-columns: repeat(3, 1fr);
            padding: 0 2.5rem;
        }

        & .project:nth-child(3n + 2) {
            grid-column-start: 3;
        }
    }

    // 1280px and above
    @media (min-width: 80rem) {
        & {
            grid-template-columns: repeat(5, 1fr);
            padding: 0 4rem;
        }

        & .project {
            &:nth-child(5n + 2) {
                grid-column-start: 3;
            }
            
            &:nth-child(5n + 3) {
                grid-column-start: 5;
            }
        }
    }
}

// ---------------------------------------------------------- //
// Cards layout                                               //
// ---------------------------------------------------------- //

#projects-layout-cards:checked ~ .projects-list {
    display: grid;
    gap: 2rem;
    grid-template-columns: minmax(0, 1fr);
    max-width: initial;

    & .project {
        background: #FFF;
        border: 1px solid #DFE3E9;
        border-radius: 1rem;
        box-shadow: 0 1px 2px rgba(0, 10, 20, 0.08);
        display: grid;
        grid-template-columns: minmax(0, 1fr);
        grid-template-rows: auto minmax(0, 1fr);
        padding: 2rem;
    }

    & .project-link__outer {
        border: 0.125rem solid #FFF;
        border-radius: 0.5rem;
        box-shadow: 0 0.25rem 0.75rem rgba(0, 20, 40, 0.08);
        overflow: hidden;
        transition: transform $transition-func;
    }

    & .project-link {
        display: grid;

        & > * {
            grid-area: 1 / 1;
        }
    }

    & .project-img {
        transition: filter $transition-func, transform $transition-func;
    }

    & .project-link:hover,
    & .project-link:focus-within {
        outline: none;

        & .project-link__outer {
            transform: scale(0.95);
        }

        & .project-img {
            filter: blur(0.5rem);
            transform: scale(1.15);
        }
    }

    @media (min-width: $breakpoint-sm) {
        & {
            grid-template-columns: repeat(auto-fit, minmax(20rem, 1fr));
        }
    }

    @media (min-width: $breakpoint-md) {
        & {
            grid-template-columns: repeat(auto-fit, minmax(24rem, 1fr));
        }
    }
}
</style>

<style lang="scss" is:inline>
#projects-layout-hexagons:checked ~ .projects-list {
    & .kbd-button {
        display: none;
    }
}
</style>