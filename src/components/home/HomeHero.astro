---
import Terminal from '@/components/home/Terminal.astro'
import KeyboardButton from '@/components/base/KeyboardButton.astro'
import PhoneUi from '@/components/home/phone-ui/PhoneUi.astro'

import DotsBackground from '@/assets/img/dots-background.svg'

const h1 = 'Hey, Iâ€™m Billy!'
const h2 = 'Frontend developer, UX/UI + Product Designer'

const h1Array = h1.split(' ')
let h1Html = ''
h1Array.forEach((word, i) => {
    h1Html += `<span style="--d: ${i * 50}ms">${word}</span>`
    if (i < h1Array.length - 1) h1Html += ' '
})

const h2Array = h2.split(' ')
let h2Html = ''
h2Array.forEach((word, i) => {
    h2Html += `<span style="--d: ${(i * 40) + 250}ms">${word}</span>`
    if (i < h2Array.length - 1) h2Html += ' '
})
---

<section class="full-width">
    <div class="home-hero">
        <div class="col-left">
            <div class="headings">
                <h1 set:html={h1Html}></h1>
                <h2 set:html={h2Html}></h2>
            </div>
            <p class="intro-text">
                <span style="--d: 400ms">
                    From
                    <KeyboardButton size="sm" data-phone-button="idea">
                        <svg class="line-icon kbd-icon" width="20" height="20" viewBox="0 0 24 24">
                            <path d="M3 12h1m8 -9v1m8 8h1m-15.4 -6.4l.7 .7m12.1 -.7l-.7 .7" />
                            <path d="M9 16a5 5 0 1 1 6 0a3.5 3.5 0 0 0 -1 3a2 2 0 0 1 -4 0a3.5 3.5 0 0 0 -1 -3" />
                            <path d="M9.7 17l4.6 0" />
                        </svg>
                        idea
                    </KeyboardButton>
                    to
                    <KeyboardButton size="sm" data-phone-button="wireframe">
                        <svg class="line-icon kbd-icon" width="20" height="20" viewBox="0 0 24 24">
                            <path d="M3 5a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-14z" />
                            <path d="M10 10h11" />
                            <path d="M10 3v18" />
                            <path d="M9 3l-6 6" />
                            <path d="M10 7l-7 7" />
                            <path d="M10 12l-7 7" />
                            <path d="M10 17l-4 4" />
                        </svg>
                        wireframe
                    </KeyboardButton>
                    to
                    <KeyboardButton size="sm" data-phone-button="production">
                        <svg class="line-icon kbd-icon" width="20" height="20" viewBox="0 0 24 24">
                            <path d="M7 8l-4 4l4 4" />
                            <path d="M17 8l4 4l-4 4" />
                            <path d="M14 4l-4 16" />
                        </svg>
                        <!-- <svg class="line-icon kbd-icon" width="20" height="20" viewBox="0 0 24 24">
                            <path d="M11.5 21h-3.5a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v8" /><path d="M20 21l2 -2l-2 -2" /><path d="M17 17l-2 2l2 2" /><path d="M11 4h2" /><path d="M12 17v.01" />
                        </svg> -->
                        production
                    </KeyboardButton>, I bring web apps, products, and sites to life with code.
                </span>
            </p>
            <Terminal />
        </div>
        <div class="col-right">
            <PhoneUi />
        </div>
    </div>
</section>

<script>
    const phoneSvg = document.querySelector('.phone-svg') as SVGElement
    const phoneButtons = document.querySelectorAll('[data-phone-button]') as NodeListOf<HTMLButtonElement>

    phoneButtons.forEach(button => {
        button.addEventListener('click', () => {
            phoneSvg.dataset.activeView = button.dataset.phoneButton
        })
    })
</script>

<style is:global>
@keyframes slide {
    from { opacity: 0; transform: translateY(120%); }
    to { opacity: 1; transform: translateY(0); }
}

h1 span,
h2 span {
    animation: slide 0.75s var(--d, 0ms) cubic-bezier(0, 0.5, 0, 1) both;
    display: inline-block;
}
</style>

<style lang="scss" define:vars={{ bg: `url(${DotsBackground.src})` }}>
@import '@/styles/_Variables.scss';

section {
    padding-bottom: 6rem;
    position: relative;

    &::after,
    &::before {
        background-attachment: fixed;
        background-image: var(--bg);
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        content: '';
        left: 0;
        pointer-events: none;
        position: absolute;
        right: 0;
        z-index: -1;
    }

    &::after {
        // background-color: rgba(255, 0, 0, 0.1);
        bottom: 4rem;
        top: 0;
    }

    &::before {
        // background-color: rgba(0, 0, 255, 0.1);
        bottom: -32rem;
        -webkit-mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0) 100%);
        mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0) 100%);
        top: calc(100% - 4rem);
    }

    @media (min-width: $breakpoint-sm) {
        padding-bottom: 6rem;
    }
}

.home-hero {
    align-content: center;
    display: grid;
    gap: 4rem;
    grid-template-columns: minmax(0, 1fr);
    margin-left: auto;
    margin-right: auto;
    max-width: 92rem;
    min-height: calc(100vh - 16rem);
    padding-top: 4rem;

    @media (min-width: $breakpoint-sm) {
        grid-template-columns: repeat(2, minmax(0, 1fr));
    }
}

.col-left {
    align-content: center;
    display: grid;
    gap: 2rem;
}

.col-right {
    align-items: center;
    display: flex;
    justify-content: center;
}

h1,
h2 {
    overflow: hidden;
}

h1 {
    font-size: 2.75rem;
    margin-bottom: 0.25rem;
}

.intro-text {
    font-size: 1.25rem;
    margin: -1rem -1rem 0.25rem;
    overflow: hidden;
    padding: 1rem;

    & > span {
        animation: slide 0.75s var(--d, 0ms) cubic-bezier(0, 0.5, 0, 1) both;
        display: inline-block;
    }
}

h2:not(:first-child) {
    font-size: 1.375rem;
    margin-top: 1rem;
}

.line-icon.kbd-icon {
    height: 1.25rem;
    margin-right: 0.375rem;
    width: 1.25rem;
}

@media (min-width: $breakpoint-lg) {
    .col-left {
        gap: 3rem;
    }

    h1 {
        font-size: 3rem;
    }

    h2:not(:first-child) {
        font-size: 1.75rem;
        margin-top: 2rem;
    }

    .intro-text {
        font-size: 1.625rem;
    }
}
</style>